{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation Wiki on CVs and how to use them","text":"<p>Documentation in progress</p> <p>The contents of the pages are currently in development, and many aspects still in flux. </p>"},{"location":"Github_Actions/JSONLD_update/","title":"JSONLD update","text":""},{"location":"Github_Actions/JSONLD_update/#github-actions-for-jsonld-related-repositories","title":"GitHub Actions for JSONLD related repositories","text":""},{"location":"Github_Actions/JSONLD_update/#overview","title":"Overview","text":"<p>The repositories utilise GitHub Actions for continuous integration and deployment. The main workflow identified is named \"Update JSONLD.\"</p>"},{"location":"Github_Actions/JSONLD_update/#workflow-description","title":"Workflow Description","text":"<ul> <li>Name: Update JSONLD</li> <li>Purpose: This workflow is designed to update JSONLD files within the repository.</li> <li>Conditions: The workflow triggers on specific events such as commits, pull requests, or schedule (based on the standard GitHub Actions triggers).</li> </ul>"},{"location":"Github_Actions/JSONLD_update/#key-steps-and-inputs","title":"Key Steps and Inputs","text":"<ol> <li>Checkout Repository:</li> <li>Action: <code>actions/checkout@v4</code></li> <li>Inputs: <ul> <li><code>fetch-depth: 2</code></li> <li><code>repository: wolfiex/obs4MIPs-cmor-tables-ld</code></li> </ul> </li> <li> <p>Description: Clones the repository with a depth of 2 to the runner.</p> </li> <li> <p>Install Dependencies:</p> </li> <li>Action: <code>pip install</code></li> <li>Inputs: <ul> <li>Various Python dependencies such as <code>pytest</code>, <code>cmip-ld</code>, etc.</li> </ul> </li> <li> <p>Description: Installs necessary Python packages for the workflow.</p> </li> <li> <p>Run Scripts:</p> </li> <li>Action: Custom scripts (e.g., <code>write_ancillary_C3S-GTO-ECV.py</code>, <code>obs4MIPsLib.py</code>)</li> <li>Inputs: <ul> <li>Specific scripts and their associated parameters.</li> </ul> </li> <li>Description: Executes scripts to process data, update files, or perform other tasks.</li> </ol>"},{"location":"Github_Actions/JSONLD_update/#mermaid-diagrams","title":"Mermaid Diagrams","text":""},{"location":"Github_Actions/JSONLD_update/#workflow-diagram","title":"Workflow Diagram","text":"<pre><code>graph TD\n    A[Start] --&gt; B[actions/checkout@v4]\n    B --&gt; C[pip install dependencies]\n    C --&gt; D[Run custom scripts]\n    D --&gt; E[End]</code></pre>"},{"location":"Github_Actions/JSONLD_update/#detailed-step-diagram","title":"Detailed Step Diagram","text":"<pre><code>graph TD\n    A[Start] --&gt; B[actions/checkout@v4]\n    B --&gt; C1[fetch-depth: 2]\n    B --&gt; C2[repository]\n    C1 --&gt; D[pip install dependencies]\n    C2 --&gt; D\n    D --&gt; E1[Install pytest]\n    D --&gt; E2[Install cmip-ld]\n    F[Run custom scripts]\n    F --&gt; G1[script1.py]\n    F --&gt; G2[script2.py]\n    E1 --&gt; F\n    E2 --&gt; F\n    G1 --&gt; H[Trigger Publish Workflow]\n    G2 --&gt; H\n    H --&gt; I[End]</code></pre>"},{"location":"How_to_use_JSONLD/%20_Introduction/","title":"Introduction","text":"<p>There are several available methods to interact with the JSONLD files.  Instructions on how to use these are found on each respective page within the sub menu. </p>"},{"location":"How_to_use_JSONLD/%20_Introduction/#methods-of-interaction","title":"Methods of interaction","text":"<p>The main categories are: </p>"},{"location":"How_to_use_JSONLD/%20_Introduction/#1-direct-interaction","title":"1. Direct interaction","text":"<p>Using the files locally or from the GitHub Repository. This can be done in a number of ways:  - local copy - github online interface - GET commands from a scripting language</p>"},{"location":"How_to_use_JSONLD/%20_Introduction/#2-cmipld-web-browsing-interface","title":"2. CMIPLD web browsing interface.","text":"<p>This is a rudementary JSONLD static page that can access all the JSONld files. This can be used to: - check file contents - view context  - perform framing requests - explore available files - quickly check entries using prefixes without the need for a full URL</p>"},{"location":"How_to_use_JSONLD/%20_Introduction/#3-pyld-native-python-interface","title":"3. PyLD native python interface.","text":"<p>This is the native library for interacting with JSONLD in python. This has the benefits of:  - Extracting files in Python - Framing  - Performing complex checks and incorporating the CVs in a personal workflow. </p>"},{"location":"How_to_use_JSONLD/%20_Introduction/#4-the-cmip-ld-cli","title":"4. The CMIP-LD CLI","text":"<p>A quick command line interface that allows dynamic JSON-LD file viewing in the terminal.  - performs recursive fills - allows the use of prefixes to easily access files - colapsable and coloured JSON exploration in the terminal  - outputs file contents or framing into a file. </p>"},{"location":"How_to_use_JSONLD/%20_Introduction/#5-cmip-ld-python-library","title":"5. CMIP-LD Python Library","text":"<p>A wrapper around PyLD with a number of useful tools and presets to ease the learning curve for non-technical and technical users.  - A list of registerd LD repositories.  - Can access and cross compare files both online and offline.  - Recursive file population (extracts all nested (linked) entries into your file) - Link Checker - LD Network generator.  - File Checker - Easy Framer and file simplifier. </p>"},{"location":"How_to_use_JSONLD/Command_line_interface/","title":"Command line interface","text":"<p>Screenshots and usage to go here. </p>"},{"location":"How_to_use_JSONLD/Command_line_interface/#installation","title":"Installation","text":"<p><pre><code>pip install git+https://github.com/WCRP-CMIP/CMIP-LD.git\n</code></pre> ! warning Beware that this repository is currently rapidly in development, and you will have to upgrade the installed version regularly. </p>"},{"location":"How_to_use_JSONLD/Direct_Interaction/","title":"Direct Interaction","text":""},{"location":"How_to_use_JSONLD/Direct_Interaction/#introduction","title":"Introduction","text":"<p>There are several available methods to interact with the JSONLD files. </p>"},{"location":"How_to_use_JSONLD/Direct_Interaction/#direct-interaction","title":"Direct interaction","text":"<p>As the files are valid JSON custom scripts can be used to interact with them directly.</p> Repository GitHub Pages URL Repository URL wcrp-universe https://wcrp-cmip.github.io/WCRP-UNIVERSE/ repo-link mip-variables https://wcrp-cmip.github.io/MIP-variables/ repo-link cmip6plus https://wcrp-cmip.github.io/CMIP6Plus_CVs/ repo-link cmip7 https://wcrp-cmip.github.io/CMIP7_CVs/ repo-link cf https://wcrp-cmip.github.io/CF/ repo-link obs4mips https://wolfiex.github.io/obs4MIPs-cmor-tables-ld/ repo-link <p>This means that you can download a local copy with  <pre><code>git clone &lt;github repo url&gt;\n</code></pre> View them in the browser, or use the requests / GET api to download them directly. </p>"},{"location":"How_to_use_JSONLD/Direct_Interaction/#file-structure","title":"File structure","text":"<p>If using the github interface, you can navigate as normal. JSONLD files are currently located under the <code>data_descriptors</code> directory in each repository. </p> <p>If the user should so wish, they are also served using github pages, under the same filepath excluding the term <code>data_descriptors</code>. </p> <p>This means that the following activity page</p> <p> https://github.com/WCRP-CMIP/WCRP-UNIVERSE/blob/main/data_descriptors/activity/cmip.json </p> <p>becomes</p> <p> https://wcrp-cmip.github.io/WCRP-UNIVERSE/activity/cmip.json</p> <p>where the <code>.json</code> is optional, but helps the browser open the file for viewing rather than downloading it. </p>"},{"location":"How_to_use_JSONLD/PyLD/","title":"PyLD","text":"<p>Python LD Notebooks to go in here. </p>"},{"location":"How_to_use_JSONLD/cmipLD_web_viewer/","title":"cmipLD web viewer","text":"<p>A wireframe of the JSONLD viewer can be found at : </p> <p>https://wcrp-cmip.github.io/CMIP-LD/static/viewer/</p> <p>To test this out, we can enter the URI for a JSONLD file. E.g. for the CMIP activity we have have the ID: https://wcrp-cmip.github.io/WCRP-UNIVERSE/activity/cmip</p>"},{"location":"How_to_use_JSONLD/cmipLD_web_viewer/#link-simplification","title":"Link simplification","text":"<p>Rather than remembering this whole link, we are also able to use the pre-defined prefix from the table before</p> Repository GitHub Pages URL Repository URL wcrp-universe https://wcrp-cmip.github.io/WCRP-UNIVERSE/ repo-link mip-variables https://wcrp-cmip.github.io/MIP-variables/ repo-link cmip6plus https://wcrp-cmip.github.io/CMIP6Plus_CVs/ repo-link cmip7 https://wcrp-cmip.github.io/CMIP7_CVs/ repo-link cf https://wcrp-cmip.github.io/CF/ repo-link obs4mips https://wolfiex.github.io/obs4MIPs-cmor-tables-ld/ repo-link <p>This means that to get to the same page, we can now type </p> <pre><code>wcrp-universe:activity/cmip\n</code></pre>"},{"location":"How_to_use_JSONLD/cmipLD_web_viewer/#getting-the-result","title":"Getting The result","text":"<p>The web interface will not present a compacted view of the JSONLD file requested as such. </p>"},{"location":"How_to_use_JSONLD/cmipLD_web_viewer/#framing","title":"Framing","text":"<p>Currently this option is disabled to a CORRS same origin policy, but this will soon be fixed. </p>"},{"location":"What_is_JSONLD%3F/Use_and_Changes/","title":"Use and Changes","text":""},{"location":"What_is_JSONLD%3F/Use_and_Changes/#json-linked-data","title":"JSON Linked-Data","text":"<p>JSONLD is a lightweight link data format closely conforming to the JSON standards. It allows us to provide relational data, in a flat format accessible to everyone within minimal intervention. </p>"},{"location":"What_is_JSONLD%3F/Use_and_Changes/#why-is-this-useful","title":"Why is this useful?","text":"<p>The JavaScript Object Notation has been accepted as a human and machine readable and intuitive data standard for both scripting and online programs. It tends to describe items in a Key-Value pair structure and present it in plain-text.  This is the standard that was adopted for CMIP6 control variables and has been used since. </p> <p>In converting current and future data into JSONLD we are able to provide pointers to reusable bits of information, thus drastically reducing duplication, and in turn human-induced error in the WCRP (and beyond) community. </p>"},{"location":"What_is_JSONLD%3F/Use_and_Changes/#existing-workflows","title":"Existing Workflows","text":"<p>In introducing any new technology, there is often a period in which existing software will need to be updated. By opting for JSONLD the interference between this should be minimal, since any produced files will still be readable by existing scripts. </p>"},{"location":"What_is_JSONLD%3F/Use_and_Changes/#bespoke-output-and-breaking-changes","title":"Bespoke output and Breaking Changes","text":"<p>The main merit of JSONLD comes from its framing capabilities. It allows us to take a flat JSON file and build (populate) this with all linked components without having to store them in the same file, or even location.  JSONLD parsers are available for all majour programming languages, and capable of extracting linked files (using their ids (URIs)) meaning that we will always have an up-to-date frame when we request it. </p> <p>This also means that should a non-standard or altered format be required for your work (e.g. just the names of MIPs or Institutions in an Activity, this will be possible through either custom framing or requesting an action be added to the relevant repository to generate this. Github actions are designed to run each time the data in the repository is updated. </p>"},{"location":"What_is_JSONLD%3F/Use_and_Changes/#how-does-it-change-the-existing-structure","title":"How does it change the existing structure?","text":"<p>JsonLD is still a valid JSON format allowing all previous tools and workflows to function. .  In addition to this we apply a intuitive unique id to each item, and a context file. </p>"},{"location":"What_is_JSONLD%3F/Use_and_Changes/#example-file-change-to-ld","title":"Example file change to LD","text":"<p><pre><code>{\n            \"description\": \"CMIP DECK: 1pctCO2, abrupt-4xCO2, amip, esm-piControl, esm-historical...\",\n            \"activity_id\": \"CMIP\",\n            \"url\": \"https://gmd.copernicus.org/articles/9/1937/2016/gmd-9-1937-2016.pdf\"\n}\n</code></pre> Is now updated to have an <code>id</code>, <code>type</code> and <code>@context</code></p> <pre><code>{\n            \"@context\": \"_context_\",\n            \"id\": \"cmip\",\n            \"type\": \"activity\",\n            \"description\": \"CMIP DECK: 1pctCO2, abrupt-4xCO2, amip, esm-piControl, esm-historical...\",\n            \"name\": \"CMIP\",\n            \"url\": \"https://gmd.copernicus.org/articles/9/1937/2016/gmd-9-1937-2016.pdf\"\n}\n</code></pre>"},{"location":"What_is_JSONLD%3F/Use_and_Changes/#context-files","title":"Context files","text":"<p>The context file defines how this shall be treated, where the files are located, and if there are any additional links to the fields. An example context file is given below <pre><code>{\n    \"@context\": {\n                    // define the base and prefix adresses so that we do not have to specify these in the file\n                    \"@base\": \"https://wcrp-cmip.github.io/CMIP6Plus_CVs/\",\n                    \"@vocab\": \"https://wcrp-cmip.github.io/CMIP6Plus_CVs/\",\n\n                    // map id and type to @id and @type. This is done for legibility\n                    \"id\": \"@id\",\n                    \"type\": \"@type\",\n\n                    // add any external prefixes. \n                    \"cmip7\": \"https://wcrp-cmip.github.io/CMIP7_CVs/\",\n                    \"wcrp-universe\": \"https://wcrp-cmip.github.io/WCRP-UNIVERSE/\"\n\n                    // define information for fields which may be linked. \n                    \"activity\": {\n                                    \"@context\": \"https://wcrp-cmip.github.io/WCRP-UNIVERSE/activity/_context_\",\n                                    \"@type\": \"@id\",\n                            }\n    },\n\n    // framing options go here, e.g. expand all links\n    \"@embed\": \"@always\"\n}\n</code></pre> The <code>_context_</code> files in our repositories are used both to define additional <code>@context</code> information, and to provide a basic framing context should that be required by the user. </p>"},{"location":"What_is_JSONLD%3F/Use_and_Changes/#other-changes-to-the-cvs","title":"Other changes to the CVs","text":""},{"location":"What_is_JSONLD%3F/Use_and_Changes/#file-hierarchy","title":"File hierarchy","text":"<p>Instead of having one large file containing all possible sources/experiments/institutions etc., we will break these out into individual json files. </p> <p>This serves to improve the workflow and usability of the directories in several ways: </p> <ol> <li>A better understanding of changes over time. This way we are able to create a difference log for an individual item, without having to track the entire collection or category.</li> <li>Error isolation A mistake in a single file will not affect any of the others, and will allow us to easier identify it. </li> <li>Versioning The changes in each file are tracked, and we know exactly when they have occured. </li> <li>Line identification It will be easier to hilight a file or specific line, without the worry that an issue 2 weeks old will now refer to something else. </li> <li>ATTRIBUTION by seeing who is contributing changes to certain files will allow us to credit prominent members of the community, and generate a list of specialists for specific topics should there be any queries at a later point. </li> </ol>"}]}